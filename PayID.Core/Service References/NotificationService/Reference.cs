//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PayID.Core.NotificationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotificationService.INotificationService")]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/Send", ReplyAction="http://tempuri.org/INotificationService/SendResponse")]
        void Send(string system, string module, string template, string type, string receiver, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/Send", ReplyAction="http://tempuri.org/INotificationService/SendResponse")]
        System.Threading.Tasks.Task SendAsync(string system, string module, string template, string type, string receiver, string content);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : PayID.Core.NotificationService.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.ClientBase<PayID.Core.NotificationService.INotificationService>, PayID.Core.NotificationService.INotificationService {
        
        public NotificationServiceClient() {
        }
        
        public NotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Send(string system, string module, string template, string type, string receiver, string content) {
            base.Channel.Send(system, module, template, type, receiver, content);
        }
        
        public System.Threading.Tasks.Task SendAsync(string system, string module, string template, string type, string receiver, string content) {
            return base.Channel.SendAsync(system, module, template, type, receiver, content);
        }
    }
}
